{"version":3,"sources":["utils/mutations.js","utils/auth.js","pages/Login.js","pages/NoMatch.js","utils/queries.js","components/ReactionList/index.js","components/ReactionForm/index.js","pages/SingleThought.js","components/ThoughtList/index.js","components/FriendList/index.js","components/ThoughtForm/index.js","pages/Profile.js","pages/Signup.js","components/Header/index.js","components/Footer/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","ADD_FRIEND","ADD_THOUGHT","ADD_REACTION","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleChange","event","target","name","value","handleFormSubmit","a","preventDefault","variables","data","Auth","console","className","onSubmit","placeholder","type","id","onChange","NoMatch","QUERY_THOUGHTS","QUERY_THOUGHT","QUERY_USER","QUERY_ME","QUERY_ME_BASIC","ReactionList","reactions","map","reaction","reactionBody","to","username","style","fontWeight","createdAt","_id","ReactionForm","thoughtId","setBody","characterCount","setCharacterCount","addReaction","e","length","SingleThought","useParams","log","useQuery","loading","thought","thoughtText","reactionCount","loggedIn","ThoughtList","thoughts","title","FriendList","friendCount","friends","friend","ThoughtForm","setText","update","cache","addThought","readQuery","query","writeQuery","me","Profile","userParam","addFriend","user","getProfile","handleClick","onClick","Signup","addUser","Header","href","logout","Footer","Home","userData","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mUAGaA,EAAaC,YAAH,qNAYVC,EAAWD,YAAH,oQAYRE,EAAaF,YAAH,iNAcVG,EAAcH,YAAH,kQAiBXI,EAAeJ,YAAH,sT,wBCLV,M,0FAjDb,WACE,OAAOK,YAAOC,KAAKC,c,sBAIrB,WAEE,IAAMC,EAAQF,KAAKC,WAEnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAIzC,SAAeA,GACb,IAEE,OADgBH,YAAOG,GACZE,IAAMC,KAAKC,MAAQ,IAK9B,MAAOC,GACP,OAAO,K,sBAKX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAI9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCE,OAAOC,SAASC,OAAO,O,oBAIzB,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,aC4BZE,EAxED,SAACC,GACb,MAAkCC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,YAAY9B,GAAvC,mBAAO+B,EAAP,KAAgBC,EAAhB,KAAgBA,MAGVC,EAAe,SAACC,GACpB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdR,EAAa,2BACRD,GADO,kBAETQ,EAAOC,MAKNC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACvBL,EAAMM,iBADiB,kBAIET,EAAM,CAC3BU,UAAU,eAAMb,KALG,gBAIbc,EAJa,EAIbA,KAIRC,EAAKZ,MAAMW,EAAKX,MAAMtB,OARD,gDAUrBmC,QAAQZ,MAAR,MAVqB,QAcvBH,EAAa,CACXH,MAAO,GACPC,SAAU,KAhBW,yDAAH,sDAoBtB,OACE,sBAAMkB,UAAU,+BAAhB,SACE,qBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,mBACA,sBAAKA,UAAU,YAAf,UACE,uBAAMC,SAAUR,EAAhB,UACE,uBACEO,UAAU,aACVE,YAAY,aACZX,KAAK,QACLY,KAAK,QACLC,GAAG,QACHZ,MAAOT,EAAUF,MACjBwB,SAAUjB,IAEZ,uBACEY,UAAU,aACVE,YAAY,SACZX,KAAK,WACLY,KAAK,WACLC,GAAG,WACHZ,MAAOT,EAAUD,SACjBuB,SAAUjB,IAEZ,wBAAQY,UAAU,oBAAoBG,KAAK,SAA3C,uBAIDhB,GAAS,6EC3DPmB,EARC,WACd,OACE,qE,SCFSC,EAAiBnD,YAAH,4SAkBdoD,EAAgBpD,YAAH,sRAkBbqD,EAAarD,YAAH,wUAsBVsD,EAAWtD,YAAH,kYA4BRuD,EAAiBvD,YAAH,2KChEZwD,EArBM,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACtB,OACE,sBAAKb,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAMA,UAAU,aAAhB,yBAEF,qBAAKA,UAAU,YAAf,SACGa,GACCA,EAAUC,KAAI,SAAAC,GAAQ,OACpB,oBAAGf,UAAU,YAAb,UACGe,EAASC,aADZ,IAC2B,MACzB,eAAC,IAAD,CAAMC,GAAE,mBAAcF,EAASG,UAAYC,MAAO,CAACC,WAAY,KAA/D,UACGL,EAASG,SADZ,OAC0BH,EAASM,eAHPN,EAASO,cC0CpCC,EAlDM,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEtB,EAAgC5C,mBAAS,IAAzC,mBAAOoC,EAAP,KAAqBS,EAArB,KACA,EAA4C7C,mBAAS,GAArD,mBAAO8C,EAAP,KAAuBC,EAAvB,KACA,EAAiC1C,YAAYzB,GAA7C,mBAAOoE,EAAP,KAAsBzC,EAAtB,KAAsBA,MAShBM,EAAgB,uCAAG,WAAMoC,GAAN,SAAAnC,EAAA,6DACvBmC,EAAElC,iBADqB,kBAIfiC,EAAY,CAChBhC,UAAW,CACT4B,YACAR,kBAPiB,OAUrBS,EAAQ,IACRE,EAAkB,GAXG,gDAarB5B,QAAQZ,MAAR,MAbqB,yDAAH,sDAiBtB,OACE,gCACE,oBAAGa,UAAU,MAAb,qCACuB0B,EADvB,QAEGvC,GAAS,sBAAMa,UAAU,OAAhB,uCAEZ,uBAAMA,UAAU,gEAAgEC,SAAUR,EAA1F,UACE,0BAAUS,YAAY,sCACtBF,UAAU,6BACVK,SAjCe,SAAAwB,GAChBA,EAAEvC,OAAOE,MAAMsC,QAAU,MAC1BL,EAAQI,EAAEvC,OAAOE,OACjBmC,EAAkBE,EAAEvC,OAAOE,MAAMsC,UA+B/BtC,MAAOwB,IAEP,wBAAQhB,UAAU,sBAAsBG,KAAK,SAA7C,2BCFO4B,EAnCO,SAAApD,GAEpB,IAAY6C,EAAcQ,cAAlB5B,GACRL,QAAQkC,IAAIT,GAEZ,MAA0BU,YAAS1B,EAAe,CAChDZ,UAAW,CAACQ,GAAIoB,KADVW,EAAR,EAAQA,QAAStC,EAAjB,EAAiBA,KAIXuC,GAAc,OAAJvC,QAAI,IAAJA,OAAA,EAAAA,EAAMuC,UAAW,GAEjC,OAAGD,EACM,6CAIP,gCACE,sBAAKnC,UAAU,YAAf,UACE,oBAAGA,UAAU,cAAb,UACE,sBAAMmB,MAAO,CAAEC,WAAY,KAAOpB,UAAU,aAA5C,SACGoC,EAAQlB,WACH,IAHV,cAIckB,EAAQf,aAEtB,qBAAKrB,UAAU,YAAf,SACE,4BAAIoC,EAAQC,mBAIfD,EAAQE,cAAgB,GAAK,cAAC,EAAD,CAAczB,UAAWuB,EAAQvB,YAC9Df,EAAKyC,YAAc,cAAC,EAAD,CAAcf,UAAWY,EAAQd,UCD5CkB,GAnCK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC/B,OAAKD,EAASX,OAKZ,gCACE,6BAAKY,IACJD,GACCA,EAAS3B,KAAI,SAAAsB,GAAO,OAClB,sBAAuBpC,UAAU,YAAjC,UACE,oBAAGA,UAAU,cAAb,UACE,cAAC,IAAD,CAAMiB,GAAE,mBAAcmB,EAAQlB,UAC9BC,MAAO,CAAEC,WAAY,KACrBpB,UAAU,aAFV,SAIGoC,EAAQlB,WACH,IANV,cAOckB,EAAQf,aAEtB,qBAAKrB,UAAU,YAAf,SACE,eAAC,IAAD,CAAMiB,GAAE,mBAAcmB,EAAQd,KAA9B,UACE,4BAAIc,EAAQC,cACZ,oBAAGrC,UAAU,OAAb,wBACcoC,EAAQE,cADtB,eACiD,IAC9CF,EAAQE,cAAgB,MAAQ,QAFnC,6BAbIF,EAAQd,WARjB,kDCmBIqB,GArBI,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAa1B,EAAwB,EAAxBA,SAAU2B,EAAc,EAAdA,QAC3C,OAAIA,GAAYA,EAAQf,OAOtB,gCACE,+BACGZ,EADH,MACgB0B,EADhB,IAC8C,IAAhBA,EAAA,sBAE7BC,EAAQ/B,KAAI,SAAAgC,GAAM,OACjB,wBAAQ9C,UAAU,+BAAlB,SACE,cAAC,IAAD,CAAMiB,GAAE,mBAAc6B,EAAO5B,UAA7B,SAA0C4B,EAAO5B,YADG4B,EAAOxB,WAX1D,oBAAGtB,UAAU,yBAAb,UACJkB,EADI,2B,SCyEI6B,GAzEK,WAClB,MAA+BnE,mBAAS,IAAxC,mBAAOyD,EAAP,KAAoBW,EAApB,KACA,EAAgC/D,YAAY1B,EAAa,CACvD0F,OADuD,SAChDC,EADgD,GACd,IAAjBC,EAAgB,EAAxBtD,KAAQsD,WACtB,IAEE,GAAGD,EAAME,UAAU,CAAEC,MAAO9C,IAAmB,CAC7C,IAAQkC,EAAaS,EAAME,UAAU,CAAEC,MAAO9C,IAAtCkC,SACRS,EAAMI,WAAW,CACjBD,MAAO9C,EACPV,KAAM,CAAE4C,SAAS,CAAEU,GAAH,oBAAkBV,QAGpC,MAAOZ,GACP9B,QAAQZ,MAAM0C,GAIhB,GAAGqB,EAAME,UAAU,CAAEC,MAAO3C,IAAa,CACvC,IAAQ6C,EAAOL,EAAME,UAAU,CAAEC,MAAO3C,IAAhC6C,GACRL,EAAMI,WAAW,CACfD,MAAO3C,EACPb,KAAM,CAAE0D,GAAG,2BAAMA,GAAP,IAAWd,SAAS,GAAD,oBAAMc,EAAGd,UAAT,CAAmBU,aApBxD,mBAAOA,EAAP,KAAqBhE,EAArB,KAAqBA,MAyBrB,EAA4CP,mBAAS,GAArD,mBAAO8C,EAAP,KAAuBC,EAAvB,KASMlC,EAAgB,uCAAG,WAAMJ,GAAN,SAAAK,EAAA,6DACvBL,EAAMM,iBADiB,kBAKfwD,EAAW,CACfvD,UAAW,CAAEyC,iBANM,OASrBW,EAAQ,IACRrB,EAAkB,GAVG,gDAYrB5B,QAAQZ,MAAR,MAZqB,yDAAH,sDAgBtB,OACE,gCACE,oBAAGa,UAAS,cAA4B,MAAnB0B,GAA0BvC,EAAQ,aAAe,IAAtE,8BACoBuC,EADpB,OAEGvC,GAAS,sBAAMa,UAAU,OAAhB,wCAEZ,uBAAMA,UAAU,iEAAiEC,SAAUR,EAA3F,UACE,0BACES,YAAY,0BACZV,MAAO6C,EACPrC,UAAU,6BACVK,SAlCa,SAAAhB,GACfA,EAAMC,OAAOE,MAAMsC,QAAU,MAC/BkB,EAAQ3D,EAAMC,OAAOE,OACrBmC,EAAkBtC,EAAMC,OAAOE,MAAMsC,YAiCnC,wBAAQ9B,UAAU,sBAAsBG,KAAK,SAA7C,2BCWOqD,GAtEC,WAEd,IAAkBC,EAAczB,cAAxBd,SACR,EAAoBjC,YAAY3B,GAAzBoG,EAAP,oBAEA,EAA0BxB,YAASuB,EAAYhD,EAAaC,EAAU,CACpEd,UAAW,CAAEsB,SAAUuC,KADjBtB,EAAR,EAAQA,QAAStC,EAAjB,EAAiBA,KAIX8D,GAAW,OAAJ9D,QAAI,IAAJA,OAAA,EAAAA,EAAM0D,MAAN,OAAY1D,QAAZ,IAAYA,OAAZ,EAAYA,EAAM8D,OAAQ,GAGvC,GAAG7D,EAAKyC,YAAczC,EAAK8D,aAAa/D,KAAKqB,WAAauC,EACxD,OAAO,cAAC,IAAD,CAAUxC,GAAI,aAIvB,GAAGkB,EACD,OAAO,6CAGT,KAAG,OAACwB,QAAD,IAACA,OAAD,EAACA,EAAMzC,UACR,OACE,2HAKJ,IAAM2C,EAAW,uCAAG,sBAAAnE,EAAA,+EAEVgE,EAAU,CACd9D,UAAW,CAACQ,GAAIuD,EAAKrC,OAHP,sDAMhBvB,QAAQZ,MAAR,MANgB,wDAAH,qDAUjB,OACE,gCACE,sBAAKa,UAAU,gBAAf,UACE,qBAAIA,UAAU,kDAAd,qBACWyD,EAAS,UAAME,EAAKzC,SAAX,MAA0B,OAD9C,eAICuC,GACC,wBAAQzD,UAAU,cAAc8D,QAASD,EAAzC,2BAMJ,sBAAK7D,UAAU,sCAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,cAAC,GAAD,CAAayC,SAAUkB,EAAKlB,SAAUC,MAAK,UAAKiB,EAAKzC,SAAV,sBAG7C,qBAAKlB,UAAU,uBAAf,SACE,cAAC,GAAD,CACEkB,SAAUyC,EAAKzC,SACf0B,YAAae,EAAKf,YAClBC,QAASc,EAAKd,eAIpB,qBAAK7C,UAAU,OAAf,UAAwByD,GAAa,cAAC,GAAD,UCO5BM,GA9EA,WACb,MAAkCnF,mBAAS,CAAEsC,SAAU,GAAIrC,MAAO,GAAIC,SAAU,KAAhF,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA6BC,YAAY5B,GAAzC,mBAAO2G,EAAP,KAAkB7E,EAAlB,KAAkBA,MAGZC,EAAe,SAACC,GACpB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdR,EAAa,2BACRD,GADO,kBAETQ,EAAOC,MAKNC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACvBL,EAAMM,iBADiB,kBAMEqE,EAAQ,CAC7BpE,UAAU,eAAMb,KAPG,gBAMbc,EANa,EAMbA,KAIRC,EAAKZ,MAAMW,EAAKmE,QAAQpG,OAVH,gDAYrBmC,QAAQZ,MAAR,MAZqB,yDAAH,sDAiBtB,OACE,sBAAMa,UAAU,+BAAhB,SACE,qBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,qBACA,sBAAKA,UAAU,YAAf,UACE,uBAAMC,SAAUR,EAAhB,UACE,uBACEO,UAAU,aACVE,YAAY,gBACZX,KAAK,WACLY,KAAK,WACLC,GAAG,WACHZ,MAAOT,EAAUmC,SACjBb,SAAUjB,IAEZ,uBACEY,UAAU,aACVE,YAAY,aACZX,KAAK,QACLY,KAAK,QACLC,GAAG,QACHZ,MAAOT,EAAUF,MACjBwB,SAAUjB,IAEZ,uBACEY,UAAU,aACVE,YAAY,SACZX,KAAK,WACLY,KAAK,WACLC,GAAG,WACHZ,MAAOT,EAAUD,SACjBuB,SAAUjB,IAEZ,wBAAQY,UAAU,oBAAoBG,KAAK,SAA3C,uBAIDhB,GAAS,4DCpCP8E,GAnCA,WAQb,OACE,wBAAQjE,UAAU,+CAAlB,SACE,sBAAKA,UAAU,0EAAf,UACE,cAAC,IAAD,CAAMiB,GAAG,IAAT,SACE,iDAGF,qBAAKjB,UAAU,cAAf,SACGF,EAAKyC,WACJ,qCACE,cAAC,IAAD,CAAMtB,GAAG,WAAT,gBACA,mBAAGiD,KAAK,IAAIJ,QAjBT,SAAAzE,GACbA,EAAMM,iBAENG,EAAKqE,UAcK,uBAKF,qCACE,cAAC,IAAD,CAAMlD,GAAG,SAAT,mBACA,cAAC,IAAD,CAAMA,GAAG,UAAT,+BCpBCmD,GARA,WACb,OACE,wBAAQpE,UAAU,iCAAlB,SACE,qBAAKA,UAAU,YAAf,oCCwCSqE,GArCF,WAEX,MAA0BnC,YAAS3B,GAA3B4B,EAAR,EAAQA,QAAStC,EAAjB,EAAiBA,KACHyE,EAAapC,YAASvB,GAA5Bd,KACF4C,GAAe,OAAJ5C,QAAI,IAAJA,OAAA,EAAAA,EAAM4C,WAAY,GAE7BF,EAAWzC,EAAKyC,WAEtB,OACE,+BACE,sBAAKvC,UAAU,iCAAf,UACGuC,GACC,qBAAKvC,UAAU,cAAf,SACE,cAAC,GAAD,MAGJ,qBAAKA,UAAS,sBAAiBuC,GAAY,YAA3C,SACEJ,EACE,6CAEA,cAAC,GAAD,CAAaM,SAAUA,EAAUC,MAAM,kCAGxCH,GAAY+B,EACX,qBAAKtE,UAAU,uBAAf,SACA,cAAC,GAAD,CACEkB,SAAUoD,EAASf,GAAGrC,SACtB0B,YAAa0B,EAASf,GAAGX,YACzBC,QAASyB,EAASf,GAAGV,YAGrB,WCrBR0B,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAoB,IAAfC,EAAc,EAAdA,QACzBjH,EAAQM,aAAaC,QAAQ,YAEnC,MAAO,CACL0G,QAAQ,2BACHA,GADE,IAELC,cAAelH,EAAK,iBAAaA,GAAU,SAK3CmH,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBrB,MAAO,IAAIiC,MA4BEC,OAzBf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBN,OAAQA,GAAxB,SACE,cAAC,IAAD,UACE,sBAAK/E,UAAU,4CAAf,UACE,cAAC,GAAD,IACA,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsF,OAAK,EAACC,KAAK,IAAIC,UAAWnB,KACjC,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAW9G,IACtC,cAAC,IAAD,CAAO4G,OAAK,EAACC,KAAK,UAAUC,UAAWzB,KACvC,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,sBAAsBC,UAAWhC,KACnD,cAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,eAAeC,UAAWzD,IAE5C,cAAC,IAAD,CAAOyD,UAAWlF,SAItB,cAAC,GAAD,YC5CJmF,GAAcC,QACW,cAA7BpH,OAAOC,SAASoH,UAEe,UAA7BrH,OAAOC,SAASoH,UAEhBrH,OAAOC,SAASoH,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B3G,QAAQkC,IACN,iHAKE8D,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBrG,QAAQkC,IAAI,sCAGR8D,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAA1H,GACLY,QAAQZ,MAAM,4CAA6CA,MC1FjE2H,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB9I,OAAOC,SAAS2F,MACpDmD,SAAW/I,OAAOC,SAAS8I,OAIvC,OAGF/I,OAAOgJ,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,GAAN,sBAEP3B,KAgEV,SAAiCK,EAAOC,GAEtCwB,MAAMzB,EAAO,CACXjB,QAAS,CAAE,iBAAkB,YAE5BsB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAAS3C,QAAQ6C,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7B7H,OAAOC,SAASwJ,eAKpBlC,GAAgBC,EAAOC,MAG1Bc,OAAM,WACL9G,QAAQkC,IACN,oEAvFA+F,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCpG,QAAQkC,IACN,iHAMJ4D,GAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.3a8a7882.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\n// login user\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`\n\nexport const ADD_FRIEND = gql`\n  mutation addFriend($id: ID!) {\n    addFriend(friendId: $id) {\n      _id\n      username\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`\n// add thought\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!) {\n    addThought(thoughtText: $thoughtText) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n      }\n    }\n  }\n`;\n\n\n// add reaction\nexport const ADD_REACTION = gql`\n  mutation addReaction($thoughtId: ID!, $reactionBody: String!) {\n    addReaction(thoughtId: $thoughtId, reactionBody: $reactionBody) {\n      _id\n      reactionCount\n      reactions {\n        _id\n        reactionBody\n        createdAt\n        username\n      }\n    }\n  }\n`","import decode from 'jwt-decode';\n\nclass Auth {\n  // retrive date saved in token\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if the user still logged in\n  loggedIn() {\n    // Check if there is a saved token and it's still valid\n    const token = this.getToken();\n    // use type coersion to check if token is NOT undefined and the token is NOT expired\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if the token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if(decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // retrive token from localstorage\n  getToken() {\n    // Retrives the user token from localstorage\n    return localStorage.getItem('id_token');\n  }\n\n  // set token to localStorage and reload page to homepage\n  login(idToken) {\n    // Saves user token to localstorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  // clear token from localstorage and force logout with reload\n  logout() {\n    // clear user token and profile date from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new Auth();","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState }\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className='flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='card'>\n          <h4 className='card-header'>Login</h4>\n          <div className='card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            {error && <div>Login failed! Please try again.</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;","import { gql } from '@apollo/client';\n// query thoughts\nexport const QUERY_THOUGHTS = gql`\n  query thoughts($username: String) {\n    thoughts(username: $username) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n// query single thought\nexport const QUERY_THOUGHT = gql`\n  query thought($id: ID!) {\n    thought(_id: $id) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`\n// query user\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n      }\n    }\n  }\n`\n\n// Query ME for profile page\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n        reactions {\n          _id\n          createdAt\n          reactionBody\n          username\n        }\n      }\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n// Query ME for homepage\nexport const QUERY_ME_BASIC = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst ReactionList = ({ reactions }) => {\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-header\">\n        <span className=\"text-light\">Reactions</span>\n      </div>\n      <div className=\"card-body\">\n        {reactions && \n          reactions.map(reaction => (\n            <p className=\"pill mb-3\" key={reaction._id}>\n              {reaction.reactionBody} {'// '}\n              <Link to={`/profile/${reaction.username}`} style={{fontWeight: 700}}>\n                {reaction.username} on {reaction.createdAt}\n              </Link>\n            </p>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ReactionList;","import { useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { ADD_REACTION } from \"../../utils/mutations\";\n\nconst ReactionForm = ({ thoughtId }) => {\n\n  const [reactionBody, setBody] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addReaction, { error }] = useMutation(ADD_REACTION);\n\n  const handleChange = e => {\n    if(e.target.value.length <= 280) {\n      setBody(e.target.value);\n      setCharacterCount(e.target.value.length);\n    }\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      await addReaction({\n        variables: {\n          thoughtId, \n          reactionBody\n        }\n      });\n      setBody('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <p className=\"m-0\">\n        {`Character Count: ${characterCount}/200`}\n        {error && <span className=\"ml-2\">Somthing went wrong...</span>}\n      </p>\n      <form className=\"flex-row justify-center justify-space-between-md align-strech\" onSubmit={handleFormSubmit}>\n        <textarea placeholder=\"Leave a reaction to this thought...\"\n        className=\"form-input col-12 col-md-9\"\n        onChange={handleChange}\n        value={reactionBody}>\n        </textarea>\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n        Submit\n      </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ReactionForm;","import React from 'react';\nimport { useParams } from 'react-router';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_THOUGHT } from '../utils/queries';\nimport Auth from '../utils/auth';\n\nimport ReactionList from '../components/ReactionList';\nimport ReactionForm from '../components/ReactionForm';\n\nconst SingleThought = props => {\n\n  const { id: thoughtId } = useParams();\n  console.log(thoughtId);\n\n  const { loading, data } = useQuery(QUERY_THOUGHT, {\n    variables: {id: thoughtId}\n  });\n\n  const thought = data?.thought || {};\n\n  if(loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"card mb-3\">\n        <p className=\"card-header\">\n          <span style={{ fontWeight: 700 }} className=\"text-light\">\n            {thought.username}\n          </span>{' '}\n          thought on {thought.createdAt}\n        </p>\n        <div className=\"card-body\">\n          <p>{thought.thoughtText}</p>\n        </div>\n      </div>\n\n      {thought.reactionCount > 0 && <ReactionList reactions={thought.reactions} />} \n      {Auth.loggedIn() && <ReactionForm thoughtId={thought._id} />}\n    </div>\n  );\n};\n\nexport default SingleThought;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map(thought => (\n          <div key={thought._id} className=\"card mb-3\">\n            <p className=\"card-header\">\n              <Link to={`/profile/${thought.username}`}\n              style={{ fontWeight: 700 }}\n              className=\"text-light\"\n              >\n                {thought.username}\n              </Link>{' '}\n              thought on {thought.createdAt}\n            </p>\n            <div className=\"card-body\">\n              <Link to={`/thought/${thought._id}`}>\n                <p>{thought.thoughtText}</p>\n                <p className=\"mb-0\">\n                  Reactions: {thought.reactionCount} || Click to{' '}\n                  {thought.reactionCount ? 'see' : 'start'} the discussion!\n                </p>\n              </Link>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst FriendList = ({ friendCount, username, friends }) => {\n  if(!friends || !friends.length) {\n    return <p className=\"bg-dark text-light p-3\">\n      {username}, make some friedns!\n    </p>\n  }\n\n  return (\n    <div>\n      <h5>\n        {username}'s {friendCount} {friendCount === 1 ? `friend` : `friends`}\n      </h5>\n      {friends.map(friend => (\n        <button className=\"btn w-100 display-block mb-2\" key={friend._id}>\n          <Link to={`/profile/${friend.username}`}>{friend.username}</Link>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FriendList;","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_THOUGHT } from \"../../utils/mutations\";\nimport { QUERY_THOUGHTS, QUERY_ME } from \"../../utils/queries\";\n\nconst ThoughtForm = () => {\n  const [thoughtText, setText] = useState('');\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        // could potentially not exist yet, so wrap in a try...catch\n        if(cache.readQuery({ query: QUERY_THOUGHTS })) {\n          const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n          cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] }\n        });\n        }\n      } catch (e) {\n        console.error(e);\n      }\n  \n      // update me object's cache, appending new thought to the end of the array\n      if(cache.readQuery({ query: QUERY_ME })) {\n        const { me } = cache.readQuery({ query: QUERY_ME });\n        cache.writeQuery({\n          query: QUERY_ME,\n          data: { me: { ...me, thoughts: [...me.thoughts, addThought] } }\n        });\n      }\n    }\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const handleChange = event => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      // add thought to the database\n      await addThought({\n        variables: { thoughtText }\n      });\n      // clear the form\n      setText('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form className=\"flex-row justify-center justify-space-between-md align-stretch\" onSubmit={handleFormSubmit}>\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          value={thoughtText}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleChange}\n        ></textarea>\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;","import React from 'react';\nimport { useParams, Redirect } from 'react-router';\nimport ThoughtList from '../components/ThoughtList';\nimport FriendList from '../components/FriendList';\nimport ThoughtForm from '../components/ThoughtForm';\nimport Auth from '../utils/auth';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_USER, QUERY_ME } from '../utils/queries';\nimport { ADD_FRIEND } from '../utils/mutations';\n\nconst Profile = () => {\n\n  const { username: userParam } = useParams();\n  const [addFriend] = useMutation(ADD_FRIEND);\n\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n    variables: { username: userParam }\n  });\n\n  const user = data?.me || data?.user || {};\n\n  // redirect to personal profile page if username matches the logged in users's\n  if(Auth.loggedIn() && Auth.getProfile().data.username === userParam) {\n    return <Redirect to={\"/profile\"} />\n  }\n\n\n  if(loading) {\n    return <div>Loading...</div>\n  }\n\n  if(!user?.username) {\n    return (\n      <h4>You need to be logged in to see this page. Use nagication links above to sign up or login</h4>\n    )\n  }\n\n  // funtion to handle addfriend\n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: {id: user._id}\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n        <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\n          Viewing {userParam ? `${user.username}'s` : 'your'} profile.\n        </h2>\n\n        {userParam && (\n          <button className=\"btn ml-auto\" onClick={handleClick}>\n          Add Friend\n          </button>\n        )}\n      </div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-8\">\n          <ThoughtList thoughts={user.thoughts} title={`${user.username}'s thoughts...`} />\n        </div>\n\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={user.username}\n            friendCount={user.friendCount}\n            friends={user.friends}\n          />\n        </div>\n      </div>\n      <div className=\"mb-3\">{!userParam && <ThoughtForm />}</div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({ username: '', email: '', password: '' });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // use mutation\n    try {\n      // execute addUser mutation and pass in variable data from \n      const { data } = await addUser({\n        variables: { ...formState }\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n  };\n\n  return (\n    <main className='flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='card'>\n          <h4 className='card-header'>Sign Up</h4>\n          <div className='card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your username'\n                name='username'\n                type='username'\n                id='username'\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            {error && <div>Sign up failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Auth from '../../utils/auth';\n\nconst Header = () => {\n\n  const logout = event => {\n    event.preventDefault();\n\n    Auth.logout();\n  }\n\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link to=\"/\">\n          <h1>Deep Thoughts</h1>\n        </Link>\n\n        <nav className=\"text-center\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/signup\">Signup</Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">&copy;2021 by Pravton</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_THOUGHTS, QUERY_ME_BASIC } from '../utils/queries';\nimport ThoughtList from '../components/ThoughtList';\nimport FriendList from '../components/FriendList';\nimport ThoughtForm from '../components/ThoughtForm';\nimport Auth from '../utils/auth';\n\nconst Home = () => {\n  // use useQuery hook to make query request\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n  const { data: userData } = useQuery(QUERY_ME_BASIC);\n  const thoughts = data?.thoughts || [];\n\n  const loggedIn = Auth.loggedIn();\n\n  return (\n    <main>\n      <div className='flex-row justify-space-between'>\n        {loggedIn && (\n          <div className=\"col-12 mb-3\">\n            <ThoughtForm />\n          </div>\n        )}\n        <div className={`col-12 mb-3 ${loggedIn && 'col-lg-8'}`}>{\n          loading ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList thoughts={thoughts} title=\"Some Feed for Thought(s)...\" />\n          )\n        }</div>\n          {loggedIn && userData ? (\n            <div className=\"col-12 col-lg-3 mb-3\">\n            <FriendList\n              username={userData.me.username}\n              friendCount={userData.me.friendCount}\n              friends={userData.me.friends} \n            />\n            </div>\n          ) : null}\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// import pages\nimport Login from './pages/Login';\nimport NoMatch from './pages/NoMatch';\nimport SingleThought from './pages/SingleThought';\nimport Profile from './pages/Profile';\nimport Signup from './pages/Signup';\n\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nimport Home from './pages/Home';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\n\nconst authLink = setContext((_, {headers }) => {\n  const token = localStorage.getItem('id_token');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='flex-column justify-flex-start min-100-vh'>\n          <Header />\n          <div className='container'>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/profile/:username?\" component={Profile} />\n              <Route exact path=\"/thought/:id\" component={SingleThought} />\n\n              <Route component={NoMatch} />\n            </Switch>\n\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}